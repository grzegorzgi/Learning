Konteneryzacja - pozwala na uruchomienie programu/procesu w odizolowanym środowisku,
zawierającym wszystkie elementy wymagane do jego działania.

Docker - pozwala na zarządzanie kontenerami i ich obrazami.

Kontener - sposób opakowania oprogramowania w sposób umożliwiający samodzielne, odizolowane działanie na wspólnym systemie operacyjnym.
Zawiera biblioteki i stawienia potrzebne do działania procesu / programu.
- zajmują mniej miejsca
- nie trzeba instalować dodatkowego systemu operacyjnego
- wymagają mniejszych zasobów niż VM
- większa przenoszalność

Kontenery działają niezależnie, możliwe jest łączenie kontenerów
Dockerfile - plik manifestu na jego podstawie konfigurowany jest obraz.



Dockerfile ------build-----> Image ------run------> kontener


ctrl + d - wyjście i zamknięcie kontenera
ctrl + p + q - wyście ale zostawienie uruchomienog kontenera

docker ps - pokaz działające kontenery, z flagą -a pokazuje wszystkie
docker images - pokazuje informajce o obrazach
docker pull nazwa_obrazu -  pobieranie obrazu np. docker pull centos (pobierze najnowszą wersje)
docker rmi nazwaobrazu/ID - usuwa dany obraz
docker rm nazwa kontenera - usuwa kontener/y
docker attach ID/nazwa - połączenie sie z danym kontenerem

docker build scieżka do dockerfile - budowanie obrazu z dockerfile  np
docker build -t mojanazwaobrazu:tag .(aktualna sciezka) 

dockerfile to plik konfiguracyjny tworzący dany obraz

docker tag ID TAG nazwa:tag - taguje obraz

docker push repozytorium/nazwa:tag - pushowanie obrazu do repozytorium / resjestru


docker commit c16378f943fe rhel-httpd
docker tag rhel-httpd registry-host:5000/myadmin/rhel-httpd
docker push registry-host:5000/myadmin/rhel-httpd

########################################################################
# Use an official Python runtime as a parent image
FROM python:2.7-slim

# Set the working directory to /app
WORKDIR /app

# Copy the current directory contents into the container at /app
COPY . /app

# Install any needed packages specified in requirements.txt
RUN pip install --trusted-host pypi.python.org -r requirements.txt

# Make port 80 available to the world outside this container
EXPOSE 80

# Define environment variable
ENV NAME World

# Run app.py when the container launches
CMD ["python", "app.py"]


#########################################################################

docker run -it nazwa - uruchomienie kontenerea z obrazu (-d uruchomienie w tle)
docker start/stop - wznowienie i zatrzymanie pracy kontenera
docker container prune - usuwa wszystkie zatrzymane kontenery

docker diff nazwa kontenera - pokazuje róznice między oryginalnym obrazem a tym co zmieniliśmy
docker commit ID nazwa nazwa - zapisanie zmodyfikowanego obrazu jako nowy  

docker exec -it ID /bin/bash - wykonanie polecenia w uruchomionym dnaym kontenerze 

docker cp foo.txt 72ca2488b353:/foo.txt - kopiowanie pliku z hosta na kontener
 

COPY vs ADD - add oprócz kopiowania pozwala na dodawanie zródła zdalnego albo wypakowanie pliku do obrazu.

RUN vs CMD - RUN wykonuje polecenia podczas podczas budowania obrazu. CMD wykonywane jest po starcie kontenera.


docker build --no-cache - buduje obraz zawsze od zera
docker run --rm - usuwa kontener po jego zamknieciu
docker run --rm -it progrium/stress - obraz odpowiedzialny za obciążenie 
docker update - update parametrów kontenera (np limit CPU/ pamięci)
/var/lib/docker/containers - pliki konfiguracyjne 
docker run --memory-swap = przestrzeń wymiany pamięci

docker save/import obraz > nazwa.tar - zapisuje obraz jakot tar


docker logs ID kontenera - logi kontenera -t(tail) --max-size(ograniczenie wielkości)
docker stats - podgląd pracy kontenerów / zużycie zasobów 
docker history - pokazuje historie obrazu
doker deamon --userns-remap - związane z namespace zwiększa bezpieczeństwo.


mellon:
grzegorzgi
84..gg

